import 'dart:io';

import 'nsgGenDataItemField.dart';
import 'nsgGenMethod.dart';
import 'nsgGenController.dart';
import 'nsgGenerator.dart';

class NsgGenDataItem {
  final String typeName;
  final List<NsgGenDataItemField> fields;

  NsgGenDataItem({this.typeName, this.fields});

  factory NsgGenDataItem.fromJson(Map<String, dynamic> parsedJson) {
    return NsgGenDataItem(
        typeName: parsedJson['typeName'],
        fields: (parsedJson['fields'] as List)
            .map((i) => NsgGenDataItemField.fromJson(i))
            .toList());
  }

  void writeCode(NsgGenerator nsgGenerator, NsgGenMethod nsgMethod) async {
    var codeList = <String>[];
    codeList.add('namespace ${nsgGenerator.cSharpNamespace}');
    codeList.add('{');
    codeList.add('  public class $typeName');
    codeList.add('');
    codeList.add('  {');

    fields.forEach((element) {
      if (element.dartType == 'int') {
        codeList.add('    public int ${element.name} { get; set; }');
      } else if (element.dartType == 'double') {
        codeList.add('    public double ${element.name} { get; set; }');
      } else {
        codeList.add('    public string ${element.name} { get; set; }');
      }
      if (element.type == 'Image') nsgMethod.addImageMethod(element);
    });
    codeList.add('  }');
    codeList.add('}');

    var fn = '${nsgGenerator.cSharpPath}/${typeName}.cs';
    //if (!File(fn).existsSync()) {
    await File(fn).writeAsString(codeList.join('\n'));
    //}
  }

  Future generateCodeDart(NsgGenerator nsgGenerator,
      NsgGenController nsgGenController, NsgGenMethod nsgGenMethod) async {
    //----------------------------------------------------------
    //generate service class for DataItem DataItem.g.dart
    //----------------------------------------------------------

    var codeList = <String>[];
    codeList.add(
        '//This is autogenerated file. All changes will be lost after code generation.');
    codeList.add("import 'package:nsg_data/nsg_data.dart';");
    codeList.add(
        "import '../${nsgGenerator.getDartName(nsgGenController.class_name)}Model.dart';");
    codeList.add('class ${typeName}Generated extends NsgDataItem {');
    fields.forEach((_) {
      codeList.add(
          " static const ${_.fieldNameVar} = '${nsgGenerator.getDartName(_.name)}';");
    });
    codeList.add('');
    codeList.add('  @override');
    codeList.add('  void initialize() {');
    fields.forEach((_) {
      codeList.add(
          '   addfield(${_.nsgDataType}(${_.fieldNameVar}), primaryKey: ${_.isPrimary});');
    });
    codeList.add('  }');
    codeList.add('');
    codeList.add('  @override');
    codeList.add('  NsgDataItem getNewObject() => ${typeName}();');
    codeList.add('');

    fields.forEach((_) {
      _.writeGetter(nsgGenController, codeList);
      _.writeSetter(nsgGenController, codeList);
    });
    codeList.add('');
    codeList.add('  @override');
    codeList.add('  String get apiRequestItems {');
    codeList.add(
        "    return '${nsgGenController.api_prefix}/${nsgGenMethod.apiPrefix}';");
    codeList.add('  }');

    codeList.add('}');

    await File('${nsgGenerator.dartPathGen}/${typeName}.g.dart')
        .writeAsString(codeList.join('\n'));
    //----------------------------------------------------------
    //generate main item class DataItem.dart
    //----------------------------------------------------------
    codeList = <String>[];
    codeList.add("import '${nsgGenerator.genPathName}/${typeName}.g.dart';");
    codeList.add('');
    codeList.add('class ${typeName} extends ${typeName}Generated {');
    codeList.add('}');

    var fn = '${nsgGenerator.dartPath}/${typeName}.dart';
    if (!File(fn).existsSync()) {
      await File(fn).writeAsString(codeList.join('\n'));
    }
  }
}
